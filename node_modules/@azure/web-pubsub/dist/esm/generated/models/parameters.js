/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { AddToGroupsRequest as AddToGroupsRequestMapper, RemoveFromGroupsRequest as RemoveFromGroupsRequestMapper, } from "../models/mappers.js";
export const endpoint = {
    parameterPath: "endpoint",
    mapper: {
        serializedName: "endpoint",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2024-12-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String",
        },
    },
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String",
        },
    },
};
export const groupsToAdd = {
    parameterPath: "groupsToAdd",
    mapper: AddToGroupsRequestMapper,
};
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String",
        },
    },
};
export const hub = {
    parameterPath: "hub",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z][A-Za-z0-9_`,.[\\]]{0,127}$"),
        },
        serializedName: "hub",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const excluded = {
    parameterPath: ["options", "excluded"],
    mapper: {
        serializedName: "excluded",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String",
                },
            },
        },
    },
    collectionFormat: "Multi",
};
export const reason = {
    parameterPath: ["options", "reason"],
    mapper: {
        serializedName: "reason",
        type: {
            name: "String",
        },
    },
};
export const accept1 = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json, text/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String",
        },
    },
};
export const userId = {
    parameterPath: ["options", "userId"],
    mapper: {
        serializedName: "userId",
        type: {
            name: "String",
        },
    },
};
export const roles = {
    parameterPath: ["options", "roles"],
    mapper: {
        serializedName: "role",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String",
                },
            },
        },
    },
    collectionFormat: "Multi",
};
export const expirationTimeInMinutes = {
    parameterPath: ["options", "expirationTimeInMinutes"],
    mapper: {
        defaultValue: 60,
        constraints: {
            InclusiveMinimum: 1,
        },
        serializedName: "minutesToExpire",
        type: {
            name: "Number",
        },
    },
};
export const groups = {
    parameterPath: ["options", "groups"],
    mapper: {
        serializedName: "group",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String",
                },
            },
        },
    },
    collectionFormat: "Multi",
};
export const clientType = {
    parameterPath: ["options", "clientType"],
    mapper: {
        defaultValue: "Default",
        serializedName: "clientType",
        type: {
            name: "String",
        },
    },
};
export const groupsToRemove = {
    parameterPath: "groupsToRemove",
    mapper: RemoveFromGroupsRequestMapper,
};
export const contentType1 = {
    parameterPath: "contentType",
    mapper: {
        serializedName: "Content-Type",
        required: true,
        type: {
            name: "Enum",
            allowedValues: ["application/json", "application/octet-stream"],
        },
    },
};
export const message = {
    parameterPath: "message",
    mapper: {
        serializedName: "message",
        required: true,
        type: {
            name: "Stream",
        },
    },
};
export const accept2 = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String",
        },
    },
};
export const contentType2 = {
    parameterPath: "contentType",
    mapper: {
        defaultValue: "text/plain",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String",
        },
    },
};
export const message1 = {
    parameterPath: "message",
    mapper: {
        serializedName: "message",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const accept3 = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String",
        },
    },
};
export const excludedConnections = {
    parameterPath: ["options", "excludedConnections"],
    mapper: {
        serializedName: "excluded",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String",
                },
            },
        },
    },
    collectionFormat: "Multi",
};
export const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "filter",
        type: {
            name: "String",
        },
    },
};
export const messageTtlSeconds = {
    parameterPath: ["options", "messageTtlSeconds"],
    mapper: {
        constraints: {
            InclusiveMaximum: 300,
            InclusiveMinimum: 0,
        },
        serializedName: "messageTtlSeconds",
        type: {
            name: "Number",
        },
    },
};
export const connectionId = {
    parameterPath: "connectionId",
    mapper: {
        constraints: {
            MinLength: 1,
        },
        serializedName: "connectionId",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const group = {
    parameterPath: "group",
    mapper: {
        constraints: {
            Pattern: new RegExp("^(?!\\s+$).+$"),
            MaxLength: 1024,
            MinLength: 1,
        },
        serializedName: "group",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const maxPageSize = {
    parameterPath: ["options", "maxPageSize"],
    mapper: {
        constraints: {
            InclusiveMaximum: 200,
            InclusiveMinimum: 1,
        },
        serializedName: "maxpagesize",
        type: {
            name: "Number",
        },
    },
};
export const top = {
    parameterPath: ["options", "top"],
    mapper: {
        constraints: {
            InclusiveMaximum: 2147483647,
            InclusiveMinimum: 1,
        },
        serializedName: "top",
        type: {
            name: "Number",
        },
    },
};
export const continuationToken = {
    parameterPath: ["options", "continuationToken"],
    mapper: {
        serializedName: "continuationToken",
        type: {
            name: "String",
        },
    },
};
export const permission = {
    parameterPath: "permission",
    mapper: {
        serializedName: "permission",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const targetName = {
    parameterPath: ["options", "targetName"],
    mapper: {
        serializedName: "targetName",
        type: {
            name: "String",
        },
    },
};
export const userId1 = {
    parameterPath: "userId",
    mapper: {
        constraints: {
            MinLength: 1,
        },
        serializedName: "userId",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
//# sourceMappingURL=parameters.js.map