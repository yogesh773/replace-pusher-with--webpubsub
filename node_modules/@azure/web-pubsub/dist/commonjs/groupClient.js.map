{"version":3,"file":"groupClient.js","sourceRoot":"","sources":["../../src/groupClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  CommonClientOptions,\n  FullOperationResponse,\n  OperationOptions,\n} from \"@azure/core-client\";\nimport type { RequestBodyType } from \"@azure/core-rest-pipeline\";\nimport { RestError } from \"@azure/core-rest-pipeline\";\nimport type { GeneratedClient } from \"./generated/generatedClient.js\";\nimport { tracingClient } from \"./tracing.js\";\nimport { getPayloadForMessage } from \"./utils.js\";\nimport type { JSONTypes } from \"./hubClient.js\";\nimport type { PagedAsyncIterableIterator } from \"@azure/core-paging\";\n\n/**\n * Options for constructing a GroupAdmin client.\n */\nexport interface GroupAdminClientOptions extends CommonClientOptions {}\n\n/**\n * Options for adding a connection to a group.\n */\nexport interface GroupAddConnectionOptions extends OperationOptions {}\n\n/**\n * Options for adding a user to a group.\n */\nexport interface GroupAddUserOptions extends OperationOptions {}\n\n/**\n * Options for checking if a user is in a group\n */\nexport interface GroupHasUserOptions extends OperationOptions {}\n\n/**\n * Options for removing a user from a group\n */\nexport interface GroupRemoveUserOptions extends OperationOptions {}\n\n/**\n * Options for removing a connection from a group\n */\nexport interface GroupRemoveConnectionOptions extends OperationOptions {}\n\n/**\n * Options for sending messages to a group.\n */\nexport interface GroupSendToAllOptions extends OperationOptions {\n  /**\n   * Connection ids to exclude from receiving this message.\n   */\n  excludedConnections?: string[];\n  /**\n   * The filter syntax to filter out the connections to send the messages to following OData filter syntax.\n   * Examples:\n   *  * Exclude connections from `user1` and `user2`: `userId ne 'user1' and userId ne 'user2'`\n   *  * Exclude connections in `group1`: `not('group1' in groups)`\n   * Details about `filter` syntax please see [OData filter syntax for Azure Web PubSub](https://aka.ms/awps/filter-syntax).\n   */\n  filter?: string;\n  /**\n   * The time-to-live (TTL) value in seconds for messages sent to the service.\n   * 0 is the default value, which means the message never expires.\n   * 300 is the maximum value.\n   * If this parameter is non-zero, messages that are not consumed by the client within the specified TTL will be dropped by the service.\n   * This parameter can help when the client's bandwidth is limited.\n   */\n  messageTtlSeconds?: number;\n}\n\n/**\n * Options for sending text messages to a group..\n */\nexport interface GroupSendTextToAllOptions extends GroupSendToAllOptions {\n  /**\n   * The content will be sent to the clients in plain text.\n   */\n  contentType: \"text/plain\";\n}\n\n/**\n * Options for closing all connections to a group.\n */\nexport interface GroupCloseAllConnectionsOptions extends OperationOptions {\n  /**\n   * Reason the connection is being closed.\n   */\n  reason?: string;\n}\n\n/**\n * A connection in a group in the Web PubSub service.\n */\nexport interface WebPubSubGroupMember {\n  /** A unique identifier of a connection. */\n  connectionId: string;\n  /** The user ID of the connection. A user can have multiple connections. */\n  userId?: string;\n}\n\n/** Options for listing connections in a group. */\nexport interface GroupListConnectionsOptions extends OperationOptions {\n  /** The maximum number of connections to include in a single response. It should be between 1 and 200. */\n  maxPageSize?: number;\n  /** The maximum number of connections to return. If the value is not set, then all the connections in a group are returned. */\n  top?: number;\n  /** A token that allows the client to retrieve the next page of results. This parameter is provided by the service in the response of a previous request when there are additional results to be fetched. Clients should include the continuationToken in the next request to receive the subsequent page of data. If this parameter is omitted, the server will return the first page of results. */\n  continuationToken?: string;\n}\n\nexport interface WebPubSubGroup {\n  /**\n   * The name of this group\n   */\n  readonly groupName: string;\n\n  /**\n   * The name of the hub this group belongs to\n   */\n  readonly hubName: string;\n\n  /**\n   * The Web PubSub API version being used by this client\n   */\n  readonly apiVersion: string;\n\n  /**\n   * The Web PubSub endpoint this client is connected to\n   */\n  readonly endpoint: string;\n\n  /**\n   * Add a specific connection to this group\n   *\n   * @param connectionId - The connection id to add to this group\n   * @param options - Additional options\n   */\n  addConnection(connectionId: string, options?: GroupAddConnectionOptions): Promise<void>;\n\n  /**\n   * Remove a specific connection from this group\n   *\n   * @param connectionId - The connection id to remove from this group\n   * @param options - Additional options\n   */\n  removeConnection(connectionId: string, options?: GroupRemoveConnectionOptions): Promise<void>;\n\n  /**\n   * Close all connections to the group\n   *\n   * @param options - Additional options\n   */\n  closeAllConnections(options?: GroupCloseAllConnectionsOptions): Promise<void>;\n\n  /**\n   * Add a user to this group\n   *\n   * @param username - The user name to add\n   * @param options - Additional options\n   */\n  addUser(username: string, options?: GroupAddUserOptions): Promise<void>;\n\n  /**\n   * Remove a user from this group\n   *\n   * @param username - The user name to remove\n   * @param options - Additional options\n   */\n  removeUser(username: string, options?: GroupRemoveUserOptions): Promise<void>;\n\n  /**\n   * Send a text message to every connection in this group\n   *\n   * @param message - The message to send\n   * @param options - Additional options\n   */\n  sendToAll(message: string, options: GroupSendTextToAllOptions): Promise<void>;\n  /**\n   * Send a json message to every connection in this group\n   *\n   * @param message - The message to send\n   * @param options - Additional options\n   */\n  sendToAll(message: JSONTypes, options?: GroupSendToAllOptions): Promise<void>;\n  /**\n   * Send a binary message to every connection in this group\n   *\n   * @param message - The binary message to send\n   * @param options - Additional options\n   */\n  sendToAll(message: RequestBodyType, options?: GroupSendToAllOptions): Promise<void>;\n\n  /**\n   * List connections in this group\n   *\n   * @param options - Additional options for listing connections\n   */\n  listConnections(\n    options?: GroupListConnectionsOptions,\n  ): Promise<PagedAsyncIterableIterator<WebPubSubGroupMember>>;\n}\n\n/**\n * @hidden\n */\nexport class WebPubSubGroupImpl implements WebPubSubGroup {\n  private client!: GeneratedClient;\n\n  /**\n   * The name of this group\n   */\n  public readonly groupName: string;\n\n  /**\n   * The name of the hub this group belongs to\n   */\n  public readonly hubName: string;\n\n  /**\n   * The Web PubSub API version being used by this client\n   */\n  public readonly apiVersion: string = \"2024-12-01\";\n\n  /**\n   * The Web PubSub endpoint this client is connected to\n   */\n  public endpoint!: string;\n\n  /**\n   * @internal\n   */\n  constructor(client: GeneratedClient, hubName: string, groupName: string) {\n    this.client = client;\n    this.groupName = groupName;\n    this.hubName = hubName;\n  }\n  /**\n   * Add a specific connection to this group\n   *\n   * @param connectionId - The connection id to add to this group\n   * @param options - Additional options\n   */\n  public async addConnection(\n    connectionId: string,\n    options: GroupAddConnectionOptions = {},\n  ): Promise<void> {\n    let response: FullOperationResponse | undefined;\n    function onResponse(rawResponse: FullOperationResponse, flatResponse: unknown): void {\n      response = rawResponse;\n      if (options.onResponse) {\n        options.onResponse(rawResponse, flatResponse);\n      }\n    }\n\n    return tracingClient.withSpan(\n      \"WebPubSubGroupClient.addConnection\",\n      options,\n      async (updatedOptions) => {\n        await this.client.webPubSub.addConnectionToGroup(\n          this.hubName,\n          this.groupName,\n          connectionId,\n          {\n            ...updatedOptions,\n            onResponse,\n          },\n        );\n\n        if (response!.status === 404) {\n          throw new RestError(`Connection id '${connectionId}' doesn't exist`, {\n            statusCode: response?.status,\n            request: response?.request,\n            response: response,\n          });\n        }\n      },\n    );\n  }\n\n  /**\n   * Remove a specific connection from this group\n   *\n   * @param connectionId - The connection id to remove from this group\n   * @param options - Additional options\n   */\n  public async removeConnection(\n    connectionId: string,\n    options: GroupRemoveConnectionOptions = {},\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"WebPubSubGroupClient.removeConnection\",\n      options,\n      (updatedOptions) => {\n        return this.client.webPubSub.removeConnectionFromGroup(\n          this.hubName,\n          this.groupName,\n          connectionId,\n          updatedOptions,\n        );\n      },\n    );\n  }\n\n  /**\n   * Close all connections to this group\n   *\n   * @param options - Additional options\n   */\n  public async closeAllConnections(options: GroupCloseAllConnectionsOptions = {}): Promise<void> {\n    return tracingClient.withSpan(\n      \"WebPubSubGroupClient.closeAllConnections\",\n      options,\n      (updatedOptions) => {\n        return this.client.webPubSub.closeGroupConnections(\n          this.hubName,\n          this.groupName,\n          updatedOptions,\n        );\n      },\n    );\n  }\n  /**\n   * Add a user to this group\n   *\n   * @param username - The user name to add\n   * @param options - Additional options\n   */\n  public async addUser(username: string, options: GroupAddUserOptions = {}): Promise<void> {\n    return tracingClient.withSpan(\"WebPubSubGroupClient.addUser\", options, (updatedOptions) => {\n      return this.client.webPubSub.addUserToGroup(\n        this.hubName,\n        this.groupName,\n        username,\n        updatedOptions,\n      );\n    });\n  }\n\n  /**\n   * Remove a user from this group\n   *\n   * @param username - The user name to remove\n   * @param options - Additional options\n   */\n  public async removeUser(username: string, options: GroupRemoveUserOptions = {}): Promise<void> {\n    return tracingClient.withSpan(\"WebPubSubGroupClient.removeUser\", options, (updatedOptions) => {\n      return this.client.webPubSub.removeUserFromGroup(\n        this.hubName,\n        this.groupName,\n        username,\n        updatedOptions,\n      );\n    });\n  }\n\n  /**\n   * Send a text message to every connection in this group\n   *\n   * @param message - The message to send\n   * @param options - Additional options\n   */\n  public async sendToAll(message: string, options: GroupSendTextToAllOptions): Promise<void>;\n  /**\n   * Send a json message to every connection in this group\n   *\n   * @param message - The message to send\n   * @param options - Additional options\n   */\n  public async sendToAll(message: JSONTypes, options?: GroupSendToAllOptions): Promise<void>;\n  /**\n   * Send a binary message to every connection in this group\n   *\n   * @param message - The binary message to send\n   * @param options - Additional options\n   */\n  public async sendToAll(message: RequestBodyType, options?: GroupSendToAllOptions): Promise<void>;\n\n  public async sendToAll(\n    message: JSONTypes | RequestBodyType,\n    options: GroupSendToAllOptions | GroupSendTextToAllOptions = {},\n  ): Promise<void> {\n    return tracingClient.withSpan(\"WebPubSubGroupClient.sendToAll\", options, (updatedOptions) => {\n      const { contentType, payload } = getPayloadForMessage(message, updatedOptions);\n      return this.client.webPubSub.sendToGroup(\n        this.hubName,\n        this.groupName,\n        contentType,\n        payload as any,\n        updatedOptions,\n      );\n    });\n  }\n\n  /**\n   * List connections in this group.\n   * @param options - The options parameters.\n   */\n  public listConnections(\n    options: GroupListConnectionsOptions = {},\n  ): Promise<PagedAsyncIterableIterator<WebPubSubGroupMember>> {\n    return tracingClient.withSpan(\n      \"WebPubSubGroupClient.listConnections\",\n      options,\n      (updatedOptions) =>\n        this.client.webPubSub.listConnectionsInGroup(this.hubName, this.groupName, updatedOptions),\n    );\n  }\n}\n"]}