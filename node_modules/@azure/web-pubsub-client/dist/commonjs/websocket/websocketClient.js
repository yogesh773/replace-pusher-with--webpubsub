"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebSocketClientFactory = exports.WebSocketClient = void 0;
const tslib_1 = require("tslib");
const ws_1 = tslib_1.__importDefault(require("ws"));
class WebSocketClient {
    constructor(uri, protocolName) {
        this._socket = new ws_1.default(uri, protocolName);
        this._socket.binaryType = "arraybuffer";
    }
    onopen(fn) {
        this._socket.onopen = fn;
    }
    onclose(fn) {
        this._socket.onclose = (event) => fn(event.code, event.reason);
    }
    onerror(fn) {
        this._socket.onerror = (event) => fn(event.error);
    }
    onmessage(fn) {
        this._socket.onmessage = (event) => fn(event.data);
    }
    close(code, reason) {
        this._socket.close(code, reason);
    }
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    send(data, _) {
        return new Promise((resolve, reject) => {
            this._socket.send(data, (err) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve();
                }
            });
        });
    }
    isOpen() {
        return this._socket.readyState === ws_1.default.OPEN;
    }
}
exports.WebSocketClient = WebSocketClient;
class WebSocketClientFactory {
    create(uri, protocolName) {
        return new WebSocketClient(uri, protocolName);
    }
}
exports.WebSocketClientFactory = WebSocketClientFactory;
//# sourceMappingURL=websocketClient.js.map